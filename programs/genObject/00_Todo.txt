# vi:nu:et:sts=4 ts=4 sw=4

*   GenItem
    *   This object needs to make passes over the model filling in data from multple
        sources such as enums, properties, class, etc.
    *   Define a VTBL for accessing the associated item's data for inclusion and
        call the various routines as needed.
    *   Last, scan the updated model removing any data insert markers not used.

-- genObject 

    --  Insure that one object within it can accept a dictionary, input file and
        generate a supplied name/destination for the output file.

        --  Add the simple preprocessor from Lemon using '%' so that it does not
            interfere with the C preprocessor and convert "%%" to "%".

    --  Add ability to define a property name, type and r/w status and include it
        in the object generation phase. See "genGetterSetter".

    --  Create a subdirectory in the model for the "Main" object and generate it
        along with "mainProgram.c". Use an option of "--main" maybe.

    --  Create a subdirectory in the model for the "Dict" object and generate it
        when option, "--dict", is found.

    --  Look into having insert points within a model where code can be brought in
        from the dictionary or subdirectory optionally.

    --  Look into being able to format the output to specific standards such as
        if/while/switch, properties, method definitions, etc.


*   Change fundamental operation to be a work queue type system where Gen has a queue to
    generate from.  It should allow for individual generation (ie genEnum like operation
    for properties/enums) or integrated generation (ie genObject with properties and enums
    intregated).

*   Merge in genEnum.

*   Finish merge properties allowing them to be generated stand-alone or integrated within
    an object.

*   Using the new preproc, look at generating from model files being used like macros.

*   Document properties.

*   Change Gen to create an AStr instead of a file ???

*   Think about separating each method into its own AStr
    which would be stored by type (internal, class, property, 
    general). Add class to each (private, ???, public).
    Add read/write property to all properties which would
    indicate where to gen headers (ie .h or _internal.h)
    Have each have a description.  Generate files with
    methods/properties generated in alphabetical order
    within class.
        method name
        method type (private, property, public)
        method class (read, write, read_write) for public
                    If class is absent, gen read_write in 
                    _internal.h

*   Run output through a C Beautifier, look in old UtilCommand directory
    



// vi:nu:et:sts=4 ts=4 sw=4
// genMake  objects.json.txt >Makefile.txt

{
    "library":{
        name:"Cmn",
        deps:null,                      // An array of library names
                                        // without "lib" prefix
        hdrs:["cmn_defs.h"]
    },

    "objects": [
        // Tests are generated by default for objects.
        {name:"Appl", deps:["CmdUtl.h"],
                    test:{srcs:[objTest.c, objTest_object.c]}},
        {name:"array"},
        {name:"ascii"},
        {name:"AStr", deps:["array.h"], json:true},
        {name:"AStrArray", deps:["AStr.h"]},
        {name:"AStrC"},
        {name:"AStrCArray", deps:["AStrC.h"]},
        {name:"AStrCReader", deps:["AStrC.h"]},
        {name:"AudioCW", deps:["AStr.h","audioWAV.h"]},
        {name:"AudioWAV", deps:["AStr.h","fbso.h","u8Array.h"]},
        {name:"BitMatrix", deps:["AStr.h","BitSet.h","u32Array.h"], "json":true},
        {name:"BitSet", deps:["u32Array.h"]},
        {name:"BlkdRcds16"},
        {name:"blks"},
        {name:"block16"},
        {name:"block32"},
        {name:"Blocks", deps:["listdl.h"]},
        /*  'bpt32', 'bpt32idx' and 'bpt32lf' provide a B-Plus Tree using a 32-bit
            index, uint32_t. It is designed to use with 'rrds' and 'lru' to provide
            fast indexed file system.
         */
        {name:"bpt32", deps:["bpt32idx.h","bpt32lf.h","rrds.h"], desc:"32-Bit Index B-Plus Tree"},
        {name:"bpt32idx", test:false, desc:"32-Bit Index B-Plus Tree Index Block"}, 
        {name:"bpt32lf", desc:"32-Bit Index B-Plus Tree Leaf Block"},
        {name:"cb", test:{srcs:["objTest.c", "objTest_object.c"]}, desc:"Generic Circular Buffer"},
        {name:"cb16", desc:"Circular Buffer for 16-bit data"},
        {name:"cb32", deps:["psxMutex.h", "psxSem.h"], desc:"Circular Buffer for 32-bit data"},
        {name:"cfa"},
        {name:"CmdUtl", deps:["AStr.h"], desc:"Command Line Parsing/Control Utilities"},
        {name:"Compiler"},
        {name:"consumer", deps:["psxMutex.h","psxSem.h","psxThread.h"]},
        {name:"crc", "test":null},
        {name:"CsvFile", deps:["ObjArray.h","Path.h","srcFile.h"]},
        {name:"DateTime", json:true},
        {name:"dbf"},
        {name:"dbField"},
        {name:"dec", json:true},
        {name:"Dir", deps:["dirEntry.h","Path.h"], json:true},
        {name:"DirEntry", deps:["dateTime.h","Path.h"], json:true},
        {name:"disk", deps:["Path.h"]},
        {name:"disks", deps:["Path.h"]},
        {name:"Ebcdic"},
        {name:"endian"},
        {name:"enum"},
        {name:"eResult"},
        {name:"execArray", deps:["ObjArray.h","ptrArray.h"]},
        {name:"False", json:true},
        {name:"fbsi", deps:["Path.h","u8Array.h"]},
        {name:"fbso", deps:["Path.h"]},
        {name:"file", deps:["u8Array.h"]},
        {name:"fileio", deps:["Path.h"]},
        {name:"FileRef" deps:["AStrC.h","Path.h"]},
        {name:"genObj"},
        {name:"greg"},
        {name:"hash32"},
        {name:"hex", json:true},
        {name:"hjson"},
        {name:"I16Array", deps:["array.h"], json:true},
        {name:"I16Matrix", deps:["I16Array.h"], json:true},
        {name:"I32Array", deps:["array.h"], json:true},
        {name:"I32Matrix", deps:["I32Array.h"], json:true},
        {name:"JsonIn",  desc:"JSON Input Support"},
        {name:"JsonOut", desc:"JSON Output Support"},
        {name:"JsonPP",  desc:"JSON Pretty Print (Not Working)"},
        /*  
            The 'Lex' objects build a lexical scanner from individual scanner
            components. Each scanner reads tokens from an input source and
            either passes thoses tokens on or accumulates tokens to build
            a different token. The objects are meant to be linked up in a
            specific order to form a larger lexical scanner from smaller
            ones. The 'Lex' object is the base for the other scanner.

            You would probably never create a lexical scanner this way, because
            of the overhead. You would more likely add all the scanning in one 
            or more modules generated by lex, flex, re2c, etc. This approach was
            used to modularize building a scanner for testing purposes.
         */
        {name:"Lex",    deps:["Token.h","TokenList.h"], 
                        desc:"Base Lexical Scanner"},
        {name:"Lex00",  deps:["Token.h","TokenList.h", "Lex.h"], 
                        desc:"??? Lexical Scanner (Not Working)"},
        {name:"Lex01",  deps:["Token.h","TokenList.h", "Lex.h"],
                        desc:"C Trigraphs Lexical Scanner"},
        {name:"Lex02",  deps:["Token.h","TokenList.h", "Lex.h"],
                        desc:"C Lexical Scanner (Not Working)"},
        {name:"Lex03",  deps:["Token.h","TokenList.h", "Lex.h"], 
                        desc:"JSON Lexical Scanner (Not Working)"},
        {name:"Lex04",  deps:["Token.h","TokenList.h", "Lex.h"],
                        desc:"Assembler Lexical Scanner (Not Working)"},
        {name:"Lex05",  deps:["Token.h","TokenList.h", "Lex.h"], 
                        desc:"LL1 Lexical Scanner (Not Working)"},
        {name:"Lex06",  deps:["Token.h","TokenList.h", "Lex.h"], 
                        desc:"??? Lexical Scanner (Not Working)"},
        {name:"Lex07",  deps:["Token.h","TokenList.h", "Lex.h"], 
                        desc:"??? Lexical Scanner (Not Working)"},
        {name:"lexj"},
        {name:"LineIndex", deps:["SrcLoc.h"], json:true, desc:"Line Index into File or Buffer"},
        {name:"lru", deps:["listdl.h"]},
        {name:"md5ChkSum", deps:["md5_plumb.h"]},
        {name:"memFile"},
        {name:"memMac64", deps:["listdl.h"], test:false, os:["macos64"]},
        {name:"memrrds"},
        {name:"memWin32", deps:["memWin32.h","memWin32_internal.h"], os:["win32"], test:false},
        {name:"misc"},
        {name:"msgBus", test:{"srcs":[objTest.c, objTest_object.c]}},
        {name:"MsgData", json:true},
        {name:"Name", deps:["str.h"], json:true},
        {name:"Node", deps:["listdl.h","Name.h","NodeBT.h"], json:true},
        {name:"NodeArray", deps:["node.h","ObjArray.h"], json:true},
        {name:"NodeBT", deps:["Node.h","rbt_tree.h"], json:true},
        {name:"NodeEnum", deps:["Node.h"]},
        {name:"NodeHash", deps:["listdl.h","Node.h"], json:true},
        {name:"NodeLink", deps:["Name.h","Node.h","str.h"], 
                            json:true},
        {name:"NodeList", deps:["listdl.h","Node.h","str.h"], 
                            json:true},
        {name:"NodeScan", deps:["Node.h","NodeArray.h"]},
        {name:"NodeTree", deps:["Node.h","NodeHash.h",
                                "ObjList.h","szTbl.h"], json:true},
        {name:"Null", json:true},
        {name:"Number", json:true},
        {name:"ObjArray", deps:["array.h"], json:true},
        {name:"ObjBT", deps:["rbt_tree.h"], json:true, desc:"NOT FINISHED, DO NOT USE!"},
        {name:"ObjCb", test:{"srcs":["objTest.c", 
                                                    "objTest_object.c"]}},
        {name:"ObjEnum"},
        {name:"ObjHash", deps:["listdl.h"], json:true},
        {name:"ObjList", deps:["listdl.h"], json:true},
        {name:"objMatrix"},
        {name:"ObjMethod", json:true},
        {name:"ObjVLink", deps:["i32Array.h"], json:true, desc:""},
        {name:"Opcode", json:true},
        {name:"Opcodes", "deps":["szBT.h", "Opcode.h"], json:true},
        {name:"Parser"},
        {name:"Path", deps:["AStr.h"], json:true},
        {name:"prt"},
        {name:"psxCond"},
        {name:"PsxExec", desc:"Execute Batch Tasks"},
        {name:"psxLock"},
        {name:"psxMutex"},
        {name:"psxSem"},
        {name:"psxThread", deps:["psxMutex.h","psxSem.h"]},
        {name:"ptrArray"},
        {name:"rrds", deps:["hash32.h","listdl.h","Path.h"]},
        {name:"Scanner", json:true},
        {name:"scanReader"},
        {name:"screen"},
        {name:"SqlCol", json:true, desc:"SQL Column Support"},
        {name:"SqlColDef", json:true, desc:"SQL Column Definition"},
        {name:"SqlCurs", json:true, desc:"SQL Cursor to be used with SQL Connections"},
        {name:"SQLite", json:false, desc:"SQLite Interface"},
        {name:"SqlRowDef", json:true, desc:"SQL Row Definition"},
        {name:"SqlStmt", json:false, desc:"SQL Statement Support"},
        {name:"SrcError", deps:["AStr.h","SrcLoc.h"], json:true},
        {name:"SrcErrors", deps:["SrcError.h", "ObjArray.h"], json:true},
        {name:"SrcFile", deps:["ascii.h","TextIn.h",
                                "Path.h","Token.h","TokenList.h"],
                        desc:"Tokenize a TextIn Stream with Look-ahead and Backup Recovery"},
        {name:"SrcFiles", deps:["ObjArray.h","Path.h","SrcFile.h", "Token.h"],
                        desc:"Create a Stack of SrcFile(s)"},
        {name:"SrcLoc", json:true},
        {name:"Sym", json:true},
        {name:"Syms", deps:["NodeBT.h","Sym.h"], json:true},
        {name:"szBT"},
        {name:"szData", json:true},
        {name:"szHash", deps:["listdl.h","szTbl.h"]},
        {name:"szTbl", deps:["ptrArray.h","szHash.h"], 
                        json:true},
        {name:"table", deps:["listdl.h"]},
        {name:"TextIn", desc:""},
        {name:"TextIns", desc:""},
        {name:"TextOut", desc:""},
        {name:"timer"},
        {name:"Token", deps:["AStrC.h","SrcLoc.h"], json:true},
        {name:"TokenList", deps:["Token.h"], json:true},
        {name:"trace"},
        {name:"TRegex", desc:"8-bit Tiny Regex"},
        {name:"TRegex32", desc:"32-bit Tiny Regex"},
        {name:"True", json:true},
        {name:"u8Array", json:true, desc:"Dynamic Array of uint8_t"},
        {name:"u8VlArray", json:true, desc:"uint8_t variable length array"},
        {name:"u12Array", deps:["array.h"]},
        {name:"U16Array", deps:["array.h"], json:true},
        {name:"U16Matrix", deps:["U16Array.h"], json:true},
        {name:"u32Array", deps:["array.h"]},
        {name:"u32Matrix"},
        {name:"uint128"},
        {name:"Uri", json:true, desc:"Uniform Resource Identifier (RFC 3986)"},
        {name:"utf8", json:true, desc:"UTF-8/16/32 Conversion"},
        {name:"Value", json:true, desc:"Generic Value (Multiple Types Supported)"},
        {name:"Visitor"},
        {name:"W32Str", json:true, desc:"Mutable 32-bit String"},
        {name:"W32StrC", json:true, desc:"Constant 32-bit String"},
    ],

    routines: [
        // Tests are generated by default for routines.
        //{name:"cmnMac32", os:["macos32"]},
        {name:"cmnMac64", os:["macos64"]},
        {name:"cmn_win32", os:["win32","win64"]},
        {name:"fileio_io", deps:["fileio.h"]},
        {name:"IntLock", deps:["IntLock.h"], test:true},
        {name:"listdl", deps:["listdl.h"], test:true},
        {name:"md5_plumb", deps:["md5_plumb.h"]},
        {name:"memrrds_io", deps:["memrrds.h"]},
        {name:"obj", deps:["obj.h"], test:false},
        {name:"rbt_tree", deps:["rbt_tree.h"], test:true},
        {name:"rrds_io", deps:["rrds.h"]},
        {name:"shellSortPtrs"},
        {name:"stackTraces"},
        {name:"str", deps:["str.h"], test:true},
    ]
}

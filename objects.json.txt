// vi:nu:et:sts=4 ts=4 sw=4
// genMake  objects.json.txt >Makefile.txt

{
    /*  See genMake for a description of the parameters used in this
        file. It is an attempt to build Makefile(s) that are compatible
        with multiple execution environment. libCmn's HJSON support is
        used to parse this file.
        MacOS 64-bit is supported. Windows support is BROKEN.
     */
    "library":{
        name:"Cmn",
        deps:null,                      // An array of library names
                                        // without "lib" prefix
        hdrs:["cmn_defs.h"]
    },

    "objects": [
        // Tests are generated by default for objects.
        {name:"Appl",           deps:["CmdUtl.h"], test:{srcs:[objTest.c, objTest_object.c]}},
        {name:"array"},
        {name:"ascii"},
        {name:"AStr",           deps:["array.h"], json:true},
        {name:"AStrArray",      desc:"An Array of AStr(ings)", "json":true, deps:["AStr.h"]},
        {name:"AStrC"},
        {name:"AStrCArray",     deps:["AStrC.h"]},
        {name:"AStrCReader",    deps:["AStrC.h"]},
        {name:"AudioCW",        deps:["AStr.h","audioWAV.h"]},
        {name:"AudioWAV",       deps:["AStr.h","fbso.h","u8Array.h"]},
        {name:"Base64",         desc:"Base64 Encoding/Decoding, used mostly in MIME/HTTP support"},
        {name:"BitMatrix",      deps:["AStr.h","BitSet.h","u32Array.h"], "json":true},
        {name:"BitSet",         deps:["u32Array.h"]},
        {name:"BlkdRcds16",     desc:"Block of Variable-Length Records", deps:["Endian.h"]},
        //{name:"blks"},
        {name:"block16"},
        {name:"block32"},
        {name:"Blocks",         deps:["listdl.h"]},

        /*  'BPT', 'BPTIndex' and 'BPTLeaf' provide a B-Plus Tree using a 32-bit
            logical block number, uint32_t, and up to a 255 byte key. It is designed to 
            use with 'RRDS' and 'lru' to provide fast indexed file system indexed by a 
            number such as the record number.
         */
        {name:"BPT",            desc:"B-Plus Tree", 
                                deps:[
                                        "BPTIndex.h", "$(OBJDIR)/BPTIndex.o",
                                        "BPTLeaf.h", "$(OBJDIR)/BPTLeaf.o",
                                        "RRDS.h", "$(OBJDIR)/RRDS.o"
                                ],
                                status:"NOT working/NOT fully tested"
        },
        {name:"BPTIndex",       desc:"B-Plus Tree Index Block", 
                                deps:["BlkdRcds16.h","$(OBJDIR)/BlkdRcds16.o"],
                                status:"NOT working/NOT fully tested"
        },
        {name:"BPTLeaf",        desc:"B-Plus Tree 32-Bit Leaf Block", 
                                deps:["BlkdRcds16.h","$(OBJDIR)/BlkdRcds16.o"],
                                status:"NOT working/NOT fully tested"
        },

        /*  'BPT32', 'BPT32Index' and 'BPT32Leaf' provide a B-Plus Tree using a 32-bit
            logical block number, uint32_t, and a 32-bit binary key. It is designed to 
            use with 'RRDS' and 'lru' to provide fast indexed file system indexed by a 
            number such as the record number.
         */
        {name:"BPT32",          desc:"B-Plus Tree", 
                                deps:[
                                        "BPT32Index.h", "$(OBJDIR)/BPT32Index.o",
                                        "BPT32Leaf.h", "$(OBJDIR)/BPT32Leaf.o",
                                        "RRDS.h", "$(OBJDIR)/RRDS.o"
                                ],
                                status:"NOT working/NOT fully tested"
        },
        {name:"BPT32Index",     desc:"B-Plus Tree Index Block", 
                                deps:["BlkdRcds16.h","$(OBJDIR)/BlkdRcds16.o"],
                                status:"NOT working/NOT fully tested"
        },
        {name:"BPT32Leaf",      desc:"B-Plus Tree 32-Bit Leaf Block", 
                                deps:["BlkdRcds16.h","$(OBJDIR)/BlkdRcds16.o"],
                                status:"NOT working/NOT fully tested"
        },

        {name:"cb",             desc:"Generic Circular Buffer", 
                                test:{srcs:["objTest.c", "objTest_object.c"]}},
        {name:"cb16",           desc:"Circular Buffer for 16-bit data"},
        {name:"cb32",           desc:"Circular Buffer for 32-bit data" deps:["psxMutex.h", "psxSem.h"],},

        {name:"cfa"},
        {name:"Cmd",            desc:"Command Base",            "json":true},
        {name:"CmdProc",        desc:"Command Processor",       "json":true},
        {name:"CmdUtl",         desc:"Command Line Parsing/Control Utilities"},
        {name:"Compiler"},
        {name:"consumer",       desc:"Consumer side of Consumer/Producer", note:"Used in libJ1939"},
        {name:"crc",            "test":null},
        {name:"CsvFile",        deps:["ObjArray.h","Path.h","srcFile.h"]},
        {name:"CsvRcd",         desc:"Comma-Delimited Record"},
        {name:"DateTime",       json:true},
        {name:"dec",            json:true},
        {name:"Dir",            deps:["dirEntry.h","Path.h"], json:true},
        {name:"DirEntry",       deps:["dateTime.h","Path.h"], json:true},
        {name:"Ebcdic"},
        {name:"Endian"},
        {name:"enum"},
        {name:"eResult"},
        //{name:"execArray",      desc:"Array of Methods and Objects", deps:["ObjArray.h","ptrArray.h"]},
        {name:"False",          json:true},
        {name:"fbsi",           deps:["Path.h","u8Array.h"]},
        {name:"fbso",           deps:["Path.h"]},
        {name:"File",           deps:["u8Array.h"]},
        {name:"FileIO",         desc:"Generic Dataset/File Input/Output", deps:["Path.h"]},
        {name:"FileRef"         deps:["AStrC.h","Path.h"]},
        {name:"genObj"},
        {name:"greg"},
        {name:"hex",            json:true},
        {name:"hjson"},
        {name:"HtmlOut",        deps:["TextOut.h"], 
                                desc:"HTML Output Helper"},
        {name:"I16Array",       desc:"int16_t Integer Array", deps:["array.h"], json:true},
        {name:"I16Matrix",      desc:"int16_t Integer Matrix", deps:["I16Array.h"], json:true},
        {name:"I32Array",       desc:"int32_t Integer Array", deps:["array.h"], json:true},
        {name:"I32Matrix",      desc:"int32_t Integer Matrix", deps:["I32Array.h"], json:true},
        {name:"JsonIn",         desc:"JSON Input Support"},
        {name:"JsonOut",        desc:"JSON Output Support"},
        {name:"JsonPP",         desc:"JSON Pretty Print (Not Working)", functional:false},
        /*  
            The 'Lex' objects build a lexical scanner from individual scanner
            components. Each scanner reads tokens from an input source and
            either passes thoses tokens on or accumulates tokens to build
            a different token. The objects are meant to be linked up in a
            specific order to form a larger lexical scanner from smaller
            ones. The 'Lex' object is the base for the other scanner.

            You would probably never create a lexical scanner this way, because
            of the overhead. You would more likely add all the scanning in one 
            or more modules generated by lex, flex, re2c, etc. This approach was
            used to modularize building a scanner for testing purposes.
            WARNING: They are not fully functional.
         */
        {name:"Lex",        deps:["Token.h","TokenList.h"], 
                            desc:"Base Lexical Scanner"},
        {name:"Lex01",      desc:"C Trigraphs Lexical Scanner",
                            deps:["Token.h","TokenList.h", "Lex.h"]
                            },
        {name:"LexC",       desc:"C Lexical Scanner",
                            deps:["Token.h","TokenList.h", "Lex.h"],
                            },
        {name:"LexJ",       desc:"HJSON Lexical Scanner"},
        {name:"LexKW",      deps:["Token.h","TokenList.h", "Lex.h"], 
                            desc:"Keyword Lexical Scanner"},
        {name:"LexTri",     desc:"C Trigraph Lexical Scanner"},
        {name:"LineIndex",  desc:"Line Index into File or Buffer", deps:["SrcLoc.h"], json:true},
        {name:"lru", deps:["listdl.h"]},
        /* ========== Add back into here and Xcode testCmn when FileIO is completed ======
        {name:"md5ChkSum", deps:["md5_plumb.h"]},
        =========================== */
        {name:"memMac64", deps:["listdl.h"], os:["macos64"]},
        {name:"memWin32", deps:["memWin32.h","memWin32_internal.h"], os:["win32"], test:false},
        {name:"misc"},
        {name:"Money64", desc:"Monetary Amounts based on 64-bit Signed Integer", json:true},
        {name:"msgBus", test:{"srcs":[objTest.c, objTest_object.c]}},
        {name:"MsgData", json:true},
        {name:"Name", deps:["str.h"], json:true},
        /*  Net* objects support TCP/IP communications with HTTP1.0 support.
            WARNING: They are not fully functional.
         */
        {name:"Net",        desc:"TCP/IP Network Support"},
        {name:"NetHTTP",    desc:"Network HTTP Support"},
        {name:"NetHTTPA",   desc:"TCP/IP Network HTTP Response/Answer", json:true},
        {name:"NetHTTPR",   desc:"TCP/IP Network HTTP Request", json:true},
        {name:"NetIO",      desc:"Network I/O using Unix Sockets"},
        {name:"NetMIME",    desc:"Network MIME Server Support"},
        /*  Node* supports fully functional generic nodes that can be used for multiple
            purposes.  A Node is defined as having a Name with associated data objects.
            WARNING: JSON support may not be fully functional.
         */
        {name:"Node",       deps:["listdl.h","Name.h","NodeBT.h"], json:true},
        {name:"NodeArray",  deps:["node.h","ObjArray.h"], json:true},
        {name:"NodeBT",     deps:["Node.h","rbt_tree.h"], json:true},
        {name:"NodeEnum",   deps:["Node.h"]},
        {name:"NodeHash",   deps:["listdl.h","Node.h"], json:true},
        {name:"NodeLink",   deps:["Name.h","Node.h","str.h"], 
                            json:true},
        {name:"NodeList",   deps:["listdl.h","Node.h","str.h"], 
                            json:true},
        {name:"NodeScan",   deps:["Node.h","NodeArray.h"]},
        {name:"NodeTree",   deps:["Node.h","NodeHash.h",
                                "ObjList.h","szTbl.h"], json:true},

        {name:"Null", json:true},
        {name:"Number", json:true},
        {name:"ObjArray", deps:["array.h"], json:true},
        {name:"ObjBT", deps:["rbt_tree.h"], json:true, desc:"NOT FINISHED, DO NOT USE!"},
        {name:"ObjCb", test:{"srcs":["objTest.c", "objTest_object.c"]}},
        {name:"ObjEnum"},
        {name:"ObjHash", deps:["listdl.h"], json:true},
        {name:"ObjList", deps:["listdl.h"], json:true},
        {name:"objMatrix"},
        {name:"ObjMethod", json:true, desc:"Object Method Pointer"},
        {name:"ObjVLink", deps:["i32Array.h"], json:true, 
                desc:"Object with a Variable Number of Integer Links"},
        {name:"Opcode", json:true, desc:"Universal Opcode Table Entry"},
        {name:"Opcodes", "deps":["szBT.h", "Opcode.h"], json:true,
                desc:"Universal Opcode Table"},
        {name:"Parser", desc:"Parser Base"},
        {name:"Path", deps:["AStr.h"], json:true},
        {name:"prt"},
        /*  The Posix Classes are an attempt to create classes that can be used in
            various O/S's to simulate the Posix functionality.
         */
        {name:"psxCond"},
        {name:"psxExec",        desc:"Execute Posix Shell Commands"},
        {name:"psxLock"},
        {name:"psxMutex"},
        {name:"psxSem"},
        {name:"psxThread",      deps:["psxMutex.h","psxSem.h"]},

        {name:"ptrArray",       desc:"An Array of pointers"},
        {name:"RpgBase",        desc:"Report Program Generator (RPG) Base", json:true},
        {name:"RpgLvl",         desc:"Report Program Generator (RPG) Level handler", json:true},
        {name:"RRDS",           desc:"Relative Record Dataset (ie Fixed size records indexed by record number)",
                                deps:["FileIO.h","lru.h","Path.h"],},
        {name:"Scanner",        desc:"String Scanner", json:true},
        {name:"Sect",           desc:"Section/Segment Table Entry", json:true},
        {name:"Sects",          desc:"Section/Segment Table", deps:["NodeBT.h","Sect.h"], json:true},
        {name:"SqlCol",         desc:"SQL Column Support", json:true},
        {name:"SqlColData",     desc:"SQL Column Data", json:true},
        {name:"SQLite",         desc:"SQLite Interface"},
        {name:"SQLiteCurs",     desc:"SQLite Cursor Interface", json:false},
        {name:"SQLiteStmt",     desc:"SQLite Statement Interface", json:false},
        {name:"SqlRow",         desc:"SQL Row Support", json:true},
        {name:"SqlRowData",     desc:"SQL Row Data", json:true},
        {name:"SqlTbl",         desc:"SQL Table Support", json:true},
        {name:"SrcDiff",        desc:"Source Difference Finder", json:false},
        {name:"SrcError",       desc:"", deps:["AStr.h","SrcLoc.h"], json:true},
        {name:"SrcErrors",      desc:"", deps:["SrcError.h", "ObjArray.h"], json:true},
        {name:"SrcFile",        desc:"Tokenize a TextIn Stream with Look-ahead and Backup Recovery",
                                deps:["ascii.h","TextIn.h","Path.h","Token.h","TokenList.h"]},
                        
        {name:"SrcFiles",       desc:"Create a Stack of SrcFile(s)", 
                                deps:["ObjArray.h","Path.h","SrcFile.h", "Token.h"],
        },
        {name:"SrcLoc",         desc:"Source File Location", json:true},
        {name:"Sym",            desc:"Symbol Table Entry", json:true},
        {name:"SymList",        desc:"List of Symbol Table Entries", json:true},
        {name:"Syms",           desc:"Symbol Table", deps:["NodeBT.h","Sym.h"], json:true},
        {name:"szBT",           desc:"Balanced Binary Tree for szkey and data ptrs."},
        {name:"szData", json:true},
        {name:"szHash", deps:["listdl.h","szTbl.h"]},
        {name:"szTbl", deps:["ptrArray.h","szHash.h"], 
                        json:true},
        {name:"Test",       desc:"Test Object Framework"},
        {name:"TextIn",     desc:""},
        {name:"TextIns",    desc:""},
        {name:"TextOut",    desc:""},
        {name:"timer"},
        {name:"Token",      deps:["AStrC.h","SrcLoc.h"], json:true},
        {name:"TokenList",  deps:["Token.h"], json:true},
        {name:"trace"},
        {name:"TRegex", desc:"8-bit Tiny Regex"},
        {name:"TRegex32", desc:"32-bit Tiny Regex"},
        {name:"True", json:true},
        {name:"u8Array", json:true, desc:"Dynamic Array of uint8_t"},
        {name:"u8VlArray", json:true, desc:"uint8_t variable length array"},
        {name:"u12Array", deps:["array.h"]},
        {name:"U16Array", deps:["array.h"], json:true},
        {name:"U16Matrix", deps:["U16Array.h"], json:true},
        {name:"u32Array", deps:["array.h"]},
        {name:"U32Index",   desc:"uint32_t Integer Index", json:false},
        {name:"u32Matrix"},
        {name:"Uri",        desc:"Uniform Resource Identifier (RFC 3986)", json:true},
        {name:"utf8",       desc:"UTF-8/16/32 Conversion", json:true},
        {name:"Value",      desc:"Generic Value (Multiple Types Supported)", json:true},
        {name:"ValueArray", desc:"An Array of Value Objects", json:true},
        {name:"Visitor"},
        {name:"W32Array",   desc:"An Array of W32Str(s)", json:true},
        {name:"W32Str",     desc:"Mutable Wide (W32CHR_T) NUL-terminated String", json:true},
        {name:"W32StrC",    desc:"Constant 32-bit String", json:true},
    ],

    routines: [
        // Tests are generated by default for routines.
        //{name:"cmnMac32", os:["macos32"]},
        {name:"cmnMac64", os:["macos64"]},
        {name:"cmn_win32", os:["win32","win64"]},
        //{name:"fileio_io", deps:["fileio.h"]},
        {name:"IntLock", deps:["IntLock.h"], test:true},
        {name:"listdl", deps:["listdl.h"], test:true},
        //FIXME: When FileIO is done! {name:"md5_plumb", deps:["md5_plumb.h"]},
        {name:"obj", deps:["obj.h"], test:false},
        {name:"rbt_tree", deps:["rbt_tree.h"], test:true},
        //{name:"rrds_io", deps:["rrds.h"]},
        {name:"shellSortPtrs"},
        {name:"stackTraces"},
        {name:"str", deps:["str.h"], test:true},
    ]
}

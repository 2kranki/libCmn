// vi:nu:et:sts=4 ts=4 sw=4
/* 
 * File:   u16Matrix_internal.h
 *	Generated by 07/30/2015 11:30:14
 *
 * Notes:
 *  --	N/A
 *
 */

/*
 This is free and unencumbered software released into the public domain.
 
 Anyone is free to copy, modify, publish, use, compile, sell, or
 distribute this software, either in source code form or as a compiled
 binary, for any purpose, commercial or non-commercial, and by any
 means.
 
 In jurisdictions that recognize copyright laws, the author or authors
 of this software dedicate any and all copyright interest in the
 software to the public domain. We make this dedication for the benefit
 of the public at large and to the detriment of our heirs and
 successors. We intend this dedication to be an overt act of
 relinquishment in perpetuity of all present and future rights to this
 software under copyright law.
 
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 OTHER DEALINGS IN THE SOFTWARE.
 
 For more information, please refer to <http://unlicense.org/>
 */




#ifndef U16MATRIX_INTERNAL_H
#define	U16MATRIX_INTERNAL_H


#include    "u16Matrix.h"

#ifdef	__cplusplus
extern "C" {
#endif

    
    typedef struct matrix_build_s {
        uint32_t        m;              // Height (Number of Rows, i)
        uint32_t        n;              // Width (Number of Columns, j)
        uint32_t        baseMax;        // Highest index allowed (m * n)
        uint32_t        maxBase;        // Current Highest Index Used
        uint32_t        highest;        // Highest pCheck entry used
        int32_t         *pBase;			// Row Base Index (j) into VALUE/CHECK
        uint32_t        *pCheck;		// Column Check for Row indexed from pBase
        uint16_t        *pValue;        // Row and Column value given Check
    } MATRIX_BUILD;
    
    
    

#pragma pack(push, 1)
struct u16Matrix_data_s	{
    /* Warning - OBJ_DATA must be first in this object!
     */
    OBJ_DATA        super;
    OBJ_IUNKNOWN    *pSuperVtbl;      // Needed for Inheritance

    // Common Data
    ERESULT         eRc;
    uint32_t        m;              // Height (Number of Rows, j)
    uint32_t        n;              // Width (Number of Columns, i)
    uint32_t        cElems;         // Size of Elems (ie m * n)
    uint16_t        *pElems;

};
#pragma pack(pop)

    extern
    const
    U16MATRIX_VTBL  u16Matrix_Vtbl;



    // Internal Functions
    void            u16Matrix_Dealloc(
        OBJ_ID          objId
    );

    MATRIX_BUILD *  u16Matrix_BuildValueCheck(
        U16MATRIX_DATA  *this
    );
    
    ERESULT         u16Matrix_FreeValueCheck(
        U16MATRIX_DATA  *this,
        MATRIX_BUILD    *pBuild
    );
    
    bool            u16Matrix_setLastError(
        U16MATRIX_DATA  *this,
        ERESULT         value
    );
    
    void *          u16Matrix_QueryInfo(
        OBJ_ID          objId,
        uint32_t        type,
        const
        char            *pStr
    );
    
#ifdef NDEBUG
#else
    bool			u16Matrix_Validate(
        U16MATRIX_DATA       *cbp
    );
#endif



#ifdef	__cplusplus
}
#endif

#endif	/* U16MATRIX_INTERNAL_H */


# vi:nu:et:sts=4 ts=4 sw=4

The following are things that are being thought about. Whether they get done or not
will depend upon time and resources.

--  Convert CB to allow size changes if needed optionally.

--  Find tests that have waits in them and rewrite new tests that the wait can be bypassed in.
    --  msgBus_test.c
    --  consumer_test.c
    --  ObjCb_test.c
    --  cb_test.c

--  Finish and debug LexTri. When done, delete/remove Lex01.

--  grep -rn --include="*.c" "ERESULT_SUCCESS_GREATER_THAN" .
--  grep -rn --include="*.c" "ERESULT_SUCCESS_LESS_THAN" .

--  Finish Net* to create a web server.
    * Net
        *   ???
    * NetHTTP
        *   ???
    * NetHTTPA
        *   ???
    * NetHTTPR
        *   ???
    * NetIO
        *   ???
    * NetMime
        *   ???

-- Sect
    *   AppendAnn where nn is 16, 24, 32
        *   Appends data given (value) (nn == length)
        *   add it to relocatable dictionary
    *   GetUnn where nn is 8, 16, 24, 32
    *   PutUnn where nn is 8, 16, 24, 32
    *   AddExtern
    *   AddPublic
    *   FindExtern
    *   FindPublic
    *   DeleteExtern
    *   DeletePublic
    *   Enumerate:
        *   externs
        *   publics
        *   relocatable table

-- Finish mkAll.

-- Finish "Consumer" object w/testing.

-- Finish "Producer" object w/testing.

-- Finish SQLite interface.

-- Convert python RPG object to C

-- Packed Decimal support
    -- See 8085 simulation or ALU8/ALU32
    -- Write using uint64 for number adjusting on overflow/underflow (???)
    -- dec64 and dec128 objects
    -- Review packed decimal support in IBM 360 for dec64 and dec128 objects.
        * add
        * subtract
        * zero and add
        * compare
        * multiply
        * divide
        * shift and round
        * edit
        * edit w/mark
        * pack
        * unpack
        * move with offset

-- int128 Support

-- int256 Support

-- Write a Money package that is compatible with SQLite or add it
    to SQLite or Docker-M$_SQL

-- Write interface for scanning (lookahead, advance, comparison,  etc)

-- Write generic scanner that that uses  above interface.

-- eresult:
    *   Look into having it support errno and using errno for its current value.
        * MacOS
        * Linux
        * Win32/Win64

-- Finish MsgData_ParseJsonObject() and add to JsonIn_ParseObject().
-- Finish MsgData_ToJson().

-- Finish SrcErrors_ParseJsonObject() and add to JsonIn_ParseObject().

-- Fix value_ToJson and value_ParseJsonObject to support float/double.

-- Finish program, genMake. See its todo.

-- Add "man 3 backtrace" to any routines segmenting.
         #include <execinfo.h>
         #include <stdio.h>
         ...
         void* callstack[128];
         int i, frames = backtrace(callstack, 128);
         char** strs = backtrace_symbols(callstack, frames);
         for (i = 0; i < frames; ++i) {
             printf("%s\n", strs[i]);
         }
         free(strs);
         ...



-- nodeHash
    -- Add JSON support
    -- Add duplicate support.
    -- Add scoping
    -- Add cHash expansion/contraction


-- path
    -- Need path that includes expansion of env variables and
        '~' for $HOME
    -- clean up of path for instance: ./abc/../ == ./
    -- ToWin() which converts '/' to '\' and any other adjustment
        needed to convert bash like file path to windows file
        path.


-- Finish JSON processing for: (See szData as an example.)
    -- Node
    -- NodeArray
    -- NodeHash
    -- objHash
    -- szData
    -- NodeList
    -- NodeTree
    -- szTbl
    -- Add ToDebugString()
    -- Add subtree extraction (ie creating a new tree from any tree node)


--  Change srcLoc to use a file name index rather than a pointer so that it can
    be written to/read from a file.
    -- change srcFile so that the file name index is supplied at object creation
        and passed to all tokens generated from the file.

-- nodeTree
    -- Add ToDebugString()
    -- Add subtree extraction (ie creating a new tree from any tree node)


--  srcFile
    -- a sidx table to track the lines from the file.
    -- provide the ability to set current location in the file as needed using
        the sidx table.

--  WIN32/WIN64
    -- (IMPORTANT) we must remove ALL L'' and L"" constants from all objects since
        we are assuming them to use int32_t, but Windows uses int16_t for those
        constants. Windows is based on UTF-16.
--  cb
    -- Look into interrupt iGet/iPut which is run in the kernel with no interrupts.

--  audioCW
    --     "int32_t *cwCharElements[128]", line 93, needs change for win32 (utf16 vs utf32)
        -- see MultiByteToWideChar() or WideCharToMultiByte() for ideas

--  cmdutl
    -- cmdutl_ParseKeyWord() needs change for win32 (utf16 vs utf32)
        -- see MultiByteToWideChar() or WideCharToMultiByte() for ideas

--  json
    -- json_ParseKeyWord() needs change for win32 (utf16 vs utf32)
        -- see MultiByteToWideChar() or WideCharToMultiByte() for ideas

--  device
    --  Needs more thought

--  wav
    --  Breakout the RIFF stuff into its own object
    --  Finish the input side of it.

--  FAT16
    --  finish when needed

--  PList
    --  See doc/plist.h

--  Posix
    --  psxThread
        --  Add Thread Local Storage, szKey with void *pData. Maybe 1k for it. String size
            must be rounded to word size on Mips/ARM.
        --  Address signal processing which right now does not exist on the PIC32.
    --  psxCond
        --  Finish and add testing of main functionality
    --  psxMutex
        --  Finish and add testing of main functionality
    --  psxSem
        --  Finish and add testing of main functionality

--  Node et al
    --  Finish nodeEntry
    --  Finish integrating nodeEntry into NodeTree, NodeGraph, NodeHash
    --  NodeArc should inherit from NodeEntry (???).
    --  Using left,parent,right or Children effectively makes the node only applicable
        to one container at a time. Maybe we need to go back and set up the containers
        to use their own internal structures removing left,parent,right and Children from
        the Node itself.
    --  why do we need nodeArray and nodeList?
    --  nodeList does not use built-in pointers.
    --  nodeTree relies on children not left,parent,right.
    --  nodeTree is effectively a list of lists.
    --  nodeArray does not use built in pointers
    --  nodeHash needs Assign() to be complete.
    --  Maybe node should just have 3 or 4 contiguous void *'s that can be used by
        the appropriate container. However, that effectively makes it so that a node
        can only be in one container at a time.



-- Finish Consumer deriving from Consumer in libPic32



-- get JSON to use srcFile internally
-- get cmdUtl to use srcFile internally
-- get Csv (???) to use srcFile internally
-- Change dbCsv,dbf to return a nodeTree compatible with JSON.


The following are things that need to be followed up on:


-- Start using HeaderDoc, see  https://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/HeaderDoc/intro/intro.html

-- Change mem to support objects separately. So, that it understands
    them when it dumps them or checks for memory problems







--  Graph Search
    Input:
        A graph with nodes N = {n1,n2,...nk} and selected node, n.
    Output:
        All nodes reachable from n.
    Steps:
        setofnodes      reached;
        setofnodes      frontier;
        node            f;

        reached = frontier = {n};
        f = n;
        while( (f != NULL) && (frontier != NULL)) {
            remove f from frontier;
            for( each arc r with tail f ) {
                if (head of r is not reached) {
                    add head of r to reached;
                }
            }
            select f from frontier;
        }
    Taken from "Compiler Design and Construction" by Arthur B Pyster



-- AStrC
    -- Finish
    -- Adjust AStr to fit AStrC/AStr using NSString


-- objHash
    -- Finish


-- dbCsv
    -- Rewrite parser (each function returns object)
    -- Finish


-- Trie
    --  Finish!
        See needsWork/xxx.txt


-- ptrArray
    -- Convert to using pwr2Array


-- TrieMP
    -- Finish
    -- Add ability to generate static trie with search routine


-- bitset(??), bitMatrix(??),
    arrayPtr(and rename to ptrArray)(??),
    -- using u16Array as a guide, upgrade to use pwr2Array


- scanOpt/cmdutl/clo (Command Line Option Scanning)
    - types of parameters (Use JSON like grammar)
        - '{'...'}' == dictionary
        - '['...']' == array
        - parameters basic types - int32_t, float, string - all stored as value object
        - named parameters of format, xxx=yyy, are stored as 'xxx' key
        - non-named parameters are stored by their relative position number on the line
        - a NodeHash (possibly szHash) is returned
    - cmnutl is to be the final object. However, the example parsing of
        command line options from Compiler/Languages/RIR/main.c shows
        that it is not all that complicated to do by hand.
    - Fix cmdutl_ParseCmdStr().
    - Merge old CLO into cmdutl (???)
        - Delete CLO and old CLO
    - Merge scanOpt into cmdutl (???)
        - Delete scanOpt
    - Add stuff from old CLO in rmwSubs that makes sense
    - Compiler/Languages/RIR has a Main.c that scans parms by main options
        and options that affect the next input file (it uses the newer CLO
        object from Windows Programming)
    - cmdutl has scanning in it also. Combine somehow.
    - it would be nice to have definitions of the switches and parameters so
        that we could do a better job of parsing. The other idea is to NOT
        allow various options to be combined after one '-', but make them
        be listed separately (not Unix like).
    - we should recognize '--' alone as terminating the scan (??)
    - compile the scanner from the normal documentation (add some form of
        markup language)



-- u8Array
    -- Add methods to get, add, and delete groups of uint8_t
    -- Possibly change astr to use u8Array underneath.



-- fbso
    -- add UTF-8 support



- DBFile
    - Finish as only the field descriptor, make other objects for the other elements
      of the dbase file system
    - Merge in old "clf" logic for create, destroy (close with delete), open, close.
    - Convert file I/O to use "fbsi" and "fbso" or fbr if fixed (???)
    - Add logic for multiple lines terminated by ASCII_CR
    - ASCII_CPM_EOF should be optional at EOF
    - Text Fields should be allowed to contain upto 64k-1 chars including ASCII_LFs
        but no <cr><lf> because that denotes end of record
    - How to do blobs, should be len and data



- LCD
    - Finish initial implementation
    - Add announcement msg with version for ecu, tcu, canfun
    - Create LCD Simulator for OSX


- GREG
    - Finish initial implementation
    - leap year (class method)
    - day of week
    - ordinal day number
    - days in year (class method)



- fbr
    - use fixed hash above and add hash table to it.
    - Finish debugging LRU/Hash mechanism



- stm
    - finish and debug
    - use hash from above???




           
